package openanalytics_open

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// QueryTaskSum invokes the openanalytics_open.QueryTaskSum API synchronously
func (client *Client) QueryTaskSum(request *QueryTaskSumRequest) (response *QueryTaskSumResponse, err error) {
	response = CreateQueryTaskSumResponse()
	err = client.DoAction(request, response)
	return
}

// QueryTaskSumWithChan invokes the openanalytics_open.QueryTaskSum API asynchronously
func (client *Client) QueryTaskSumWithChan(request *QueryTaskSumRequest) (<-chan *QueryTaskSumResponse, <-chan error) {
	responseChan := make(chan *QueryTaskSumResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryTaskSum(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// QueryTaskSumWithCallback invokes the openanalytics_open.QueryTaskSum API asynchronously
func (client *Client) QueryTaskSumWithCallback(request *QueryTaskSumRequest, callback func(response *QueryTaskSumResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryTaskSumResponse
		var err error
		defer close(result)
		response, err = client.QueryTaskSum(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// QueryTaskSumRequest is the request struct for api QueryTaskSum
type QueryTaskSumRequest struct {
	*requests.RpcRequest
	TwoDaysAgoBeginTs string `position:"Body" name:"TwoDaysAgoBeginTs"`
	YesterdayBeginTs  string `position:"Body" name:"YesterdayBeginTs"`
	TodayBeginTs      string `position:"Body" name:"TodayBeginTs"`
}

// QueryTaskSumResponse is the response struct for api QueryTaskSum
type QueryTaskSumResponse struct {
	*responses.BaseResponse
	RequestId        string           `json:"RequestId" xml:"RequestId"`
	RegionId         string           `json:"RegionId" xml:"RegionId"`
	QueryTaskSumInfo QueryTaskSumInfo `json:"QueryTaskSumInfo" xml:"QueryTaskSumInfo"`
}

// CreateQueryTaskSumRequest creates a request to invoke QueryTaskSum API
func CreateQueryTaskSumRequest() (request *QueryTaskSumRequest) {
	request = &QueryTaskSumRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("openanalytics-open", "2018-06-19", "QueryTaskSum", "openanalytics", "openAPI")
	request.Method = requests.POST
	return
}

// CreateQueryTaskSumResponse creates a response to parse from QueryTaskSum response
func CreateQueryTaskSumResponse() (response *QueryTaskSumResponse) {
	response = &QueryTaskSumResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
