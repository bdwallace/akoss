package openanalytics_open

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// StopVirtualCluster invokes the openanalytics_open.StopVirtualCluster API synchronously
func (client *Client) StopVirtualCluster(request *StopVirtualClusterRequest) (response *StopVirtualClusterResponse, err error) {
	response = CreateStopVirtualClusterResponse()
	err = client.DoAction(request, response)
	return
}

// StopVirtualClusterWithChan invokes the openanalytics_open.StopVirtualCluster API asynchronously
func (client *Client) StopVirtualClusterWithChan(request *StopVirtualClusterRequest) (<-chan *StopVirtualClusterResponse, <-chan error) {
	responseChan := make(chan *StopVirtualClusterResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.StopVirtualCluster(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// StopVirtualClusterWithCallback invokes the openanalytics_open.StopVirtualCluster API asynchronously
func (client *Client) StopVirtualClusterWithCallback(request *StopVirtualClusterRequest, callback func(response *StopVirtualClusterResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *StopVirtualClusterResponse
		var err error
		defer close(result)
		response, err = client.StopVirtualCluster(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// StopVirtualClusterRequest is the request struct for api StopVirtualCluster
type StopVirtualClusterRequest struct {
	*requests.RpcRequest
	Name string `position:"Body" name:"Name"`
}

// StopVirtualClusterResponse is the response struct for api StopVirtualCluster
type StopVirtualClusterResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
}

// CreateStopVirtualClusterRequest creates a request to invoke StopVirtualCluster API
func CreateStopVirtualClusterRequest() (request *StopVirtualClusterRequest) {
	request = &StopVirtualClusterRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("openanalytics-open", "2018-06-19", "StopVirtualCluster", "openanalytics", "openAPI")
	request.Method = requests.POST
	return
}

// CreateStopVirtualClusterResponse creates a response to parse from StopVirtualCluster response
func CreateStopVirtualClusterResponse() (response *StopVirtualClusterResponse) {
	response = &StopVirtualClusterResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
