package openanalytics_open

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetRegionStatus invokes the openanalytics_open.GetRegionStatus API synchronously
func (client *Client) GetRegionStatus(request *GetRegionStatusRequest) (response *GetRegionStatusResponse, err error) {
	response = CreateGetRegionStatusResponse()
	err = client.DoAction(request, response)
	return
}

// GetRegionStatusWithChan invokes the openanalytics_open.GetRegionStatus API asynchronously
func (client *Client) GetRegionStatusWithChan(request *GetRegionStatusRequest) (<-chan *GetRegionStatusResponse, <-chan error) {
	responseChan := make(chan *GetRegionStatusResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetRegionStatus(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// GetRegionStatusWithCallback invokes the openanalytics_open.GetRegionStatus API asynchronously
func (client *Client) GetRegionStatusWithCallback(request *GetRegionStatusRequest, callback func(response *GetRegionStatusResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetRegionStatusResponse
		var err error
		defer close(result)
		response, err = client.GetRegionStatus(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// GetRegionStatusRequest is the request struct for api GetRegionStatus
type GetRegionStatusRequest struct {
	*requests.RpcRequest
	ExternalUid          string `position:"Body" name:"ExternalUid"`
	ExternalAliyunUid    string `position:"Body" name:"ExternalAliyunUid"`
	ExternalBizAliyunUid string `position:"Body" name:"ExternalBizAliyunUid"`
}

// GetRegionStatusResponse is the response struct for api GetRegionStatus
type GetRegionStatusResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	RegionId  string `json:"RegionId" xml:"RegionId"`
	Status    string `json:"Status" xml:"Status"`
}

// CreateGetRegionStatusRequest creates a request to invoke GetRegionStatus API
func CreateGetRegionStatusRequest() (request *GetRegionStatusRequest) {
	request = &GetRegionStatusRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("openanalytics-open", "2018-06-19", "GetRegionStatus", "openanalytics", "openAPI")
	request.Method = requests.POST
	return
}

// CreateGetRegionStatusResponse creates a response to parse from GetRegionStatus response
func CreateGetRegionStatusResponse() (response *GetRegionStatusResponse) {
	response = &GetRegionStatusResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
