package openanalytics_open

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ModifyVirtualClusterForSpark invokes the openanalytics_open.ModifyVirtualClusterForSpark API synchronously
func (client *Client) ModifyVirtualClusterForSpark(request *ModifyVirtualClusterForSparkRequest) (response *ModifyVirtualClusterForSparkResponse, err error) {
	response = CreateModifyVirtualClusterForSparkResponse()
	err = client.DoAction(request, response)
	return
}

// ModifyVirtualClusterForSparkWithChan invokes the openanalytics_open.ModifyVirtualClusterForSpark API asynchronously
func (client *Client) ModifyVirtualClusterForSparkWithChan(request *ModifyVirtualClusterForSparkRequest) (<-chan *ModifyVirtualClusterForSparkResponse, <-chan error) {
	responseChan := make(chan *ModifyVirtualClusterForSparkResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ModifyVirtualClusterForSpark(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ModifyVirtualClusterForSparkWithCallback invokes the openanalytics_open.ModifyVirtualClusterForSpark API asynchronously
func (client *Client) ModifyVirtualClusterForSparkWithCallback(request *ModifyVirtualClusterForSparkRequest, callback func(response *ModifyVirtualClusterForSparkResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ModifyVirtualClusterForSparkResponse
		var err error
		defer close(result)
		response, err = client.ModifyVirtualClusterForSpark(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ModifyVirtualClusterForSparkRequest is the request struct for api ModifyVirtualClusterForSpark
type ModifyVirtualClusterForSparkRequest struct {
	*requests.RpcRequest
	DefaultExecutorSpecName string           `position:"Body" name:"DefaultExecutorSpecName"`
	MaxMemory               requests.Float   `position:"Body" name:"MaxMemory"`
	SparkModuleReleaseName  string           `position:"Body" name:"SparkModuleReleaseName"`
	Description             string           `position:"Body" name:"Description"`
	DefaultExecutorNumbers  requests.Integer `position:"Body" name:"DefaultExecutorNumbers"`
	MaxCpu                  requests.Float   `position:"Body" name:"MaxCpu"`
	Name                    string           `position:"Body" name:"Name"`
	DefaultDriverSpecName   string           `position:"Body" name:"DefaultDriverSpecName"`
}

// ModifyVirtualClusterForSparkResponse is the response struct for api ModifyVirtualClusterForSpark
type ModifyVirtualClusterForSparkResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
}

// CreateModifyVirtualClusterForSparkRequest creates a request to invoke ModifyVirtualClusterForSpark API
func CreateModifyVirtualClusterForSparkRequest() (request *ModifyVirtualClusterForSparkRequest) {
	request = &ModifyVirtualClusterForSparkRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("openanalytics-open", "2018-06-19", "ModifyVirtualClusterForSpark", "openanalytics", "openAPI")
	request.Method = requests.POST
	return
}

// CreateModifyVirtualClusterForSparkResponse creates a response to parse from ModifyVirtualClusterForSpark response
func CreateModifyVirtualClusterForSparkResponse() (response *ModifyVirtualClusterForSparkResponse) {
	response = &ModifyVirtualClusterForSparkResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
