package openanalytics_open

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeDataLakeAnalyticsService invokes the openanalytics_open.DescribeDataLakeAnalyticsService API synchronously
func (client *Client) DescribeDataLakeAnalyticsService(request *DescribeDataLakeAnalyticsServiceRequest) (response *DescribeDataLakeAnalyticsServiceResponse, err error) {
	response = CreateDescribeDataLakeAnalyticsServiceResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeDataLakeAnalyticsServiceWithChan invokes the openanalytics_open.DescribeDataLakeAnalyticsService API asynchronously
func (client *Client) DescribeDataLakeAnalyticsServiceWithChan(request *DescribeDataLakeAnalyticsServiceRequest) (<-chan *DescribeDataLakeAnalyticsServiceResponse, <-chan error) {
	responseChan := make(chan *DescribeDataLakeAnalyticsServiceResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeDataLakeAnalyticsService(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeDataLakeAnalyticsServiceWithCallback invokes the openanalytics_open.DescribeDataLakeAnalyticsService API asynchronously
func (client *Client) DescribeDataLakeAnalyticsServiceWithCallback(request *DescribeDataLakeAnalyticsServiceRequest, callback func(response *DescribeDataLakeAnalyticsServiceResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeDataLakeAnalyticsServiceResponse
		var err error
		defer close(result)
		response, err = client.DescribeDataLakeAnalyticsService(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeDataLakeAnalyticsServiceRequest is the request struct for api DescribeDataLakeAnalyticsService
type DescribeDataLakeAnalyticsServiceRequest struct {
	*requests.RpcRequest
	InternetChargeType string `position:"Query" name:"InternetChargeType"`
}

// DescribeDataLakeAnalyticsServiceResponse is the response struct for api DescribeDataLakeAnalyticsService
type DescribeDataLakeAnalyticsServiceResponse struct {
	*responses.BaseResponse
	Success   bool   `json:"Success" xml:"Success"`
	ErrorCode string `json:"ErrorCode" xml:"ErrorCode"`
	ErrorInfo string `json:"ErrorInfo" xml:"ErrorInfo"`
	Result    string `json:"Result" xml:"Result"`
	RequestId string `json:"RequestId" xml:"RequestId"`
}

// CreateDescribeDataLakeAnalyticsServiceRequest creates a request to invoke DescribeDataLakeAnalyticsService API
func CreateDescribeDataLakeAnalyticsServiceRequest() (request *DescribeDataLakeAnalyticsServiceRequest) {
	request = &DescribeDataLakeAnalyticsServiceRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("openanalytics-open", "2018-06-19", "DescribeDataLakeAnalyticsService", "openanalytics", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeDataLakeAnalyticsServiceResponse creates a response to parse from DescribeDataLakeAnalyticsService response
func CreateDescribeDataLakeAnalyticsServiceResponse() (response *DescribeDataLakeAnalyticsServiceResponse) {
	response = &DescribeDataLakeAnalyticsServiceResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
